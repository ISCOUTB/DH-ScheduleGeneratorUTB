services:
  # Servicio del Backend (API)
  backend:
    build: ./backend
    container_name: api
    restart: unless-stopped
    env_file: ./backend/.env
    depends_on:
      db:
        condition: service_healthy # Espera a que la DB esté lista
    networks:
      - schedule-net

  # Servicio del Frontend (Flutter + Nginx)
  frontend:
    build: ./frontend
    container_name: web
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443" # <-- Añadimos el puerto para HTTPS
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./data/letsencrypt:/etc/letsencrypt
      - ./data/www:/var/www/html
    depends_on:
      - backend
    networks:
      - schedule-net

  # Servicio de Let's Encrypt para la renovación automática
  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./data/letsencrypt:/etc/letsencrypt
      - ./data/www:/var/www/html
    entrypoint: ""
    # Ahora, este comando se ejecuta como el proceso principal del contenedor.
    command: >
      sh -c "
        trap exit TERM;
        while :; do
          echo 'Attempting to renew certificates...';
          certbot renew --webroot -w /var/www/html;
          echo 'Sleeping for 12 hours...';
          sleep 12h & wait $${!};
        done;
      "
    depends_on:
      - frontend

  # Servicio de la Base de Datos (PostgreSQL)
  db:
    build:
      context: .
      dockerfile: db.Dockerfile
    container_name: db
    restart: unless-stopped
    env_file: ./backend/.env
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - schedule-net

  # Se ejecuta UNA VEZ para poblar la DB
  initial-data:
    build:
      context: ./backend
      dockerfile: scripts.Dockerfile # Usa el Dockerfile de los scripts
    env_file: ./backend/.env
    depends_on:
      db:
        condition: service_healthy # Espera a que la DB esté lista
    command: python scripts/actualizar_datos.py # Comando a ejecutar
    networks:
      - schedule-net

  # Se ejecuta periódicamente (CRON)
  cron-updater:
    build:
      context: ./backend
      dockerfile: scripts.Dockerfile
    env_file: ./backend/.env
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy # Espera a que la DB esté lista
    command: >
      sh -c "
        apt-get update && apt-get install -y cron &&
        printenv | grep -v 'no_proxy' > /etc/environment &&
        echo '*/6 * * * * root . /etc/environment; /usr/local/bin/python /app/scripts/actualizar_datos.py >> /var/log/cron.log 2>&1' > /etc/cron.d/update-task &&
        chmod 0644 /etc/cron.d/update-task &&
        touch /var/log/cron.log &&
        cron &&
        tail -f /var/log/cron.log
      "
    networks:
      - schedule-net

volumes:
  postgres_data:
  # Los volúmenes de letsencrypt y www ahora se manejan como carpetas locales

networks:
  schedule-net:
